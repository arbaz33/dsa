package com.labexam.entity;

public class BinarySearch {
	
	public int search(int arr[], int start, int end, int element) {
		
		if(start == end) {
			if(arr[start] == element)
				return start;
			else
				return -1;
		}
	
		int mid = (start + end) / 2;
		
		if (element == arr[mid])
			return mid;
		
		if (element > arr[mid])
			return search(arr, (mid + 1), end, element);
		else
			return search(arr, start, (mid - 1), element);
	}

}

package com.labexam.main;

import com.labexam.entity.BinarySearch;

public class BinarySearchMain {
	
	public static void main(String[] args)
	{
	
	BinarySearch obj = new BinarySearch();
	
	int arr[] = {10,25,42,55,64,77,86,99};

	int n = arr.length - 1;
	int element = 64;
	
	System.out.println("Index of the element : "+ obj.search(arr, 0, n, element));
	
	}
}

------------
output ==

Index of the element : 4

---------------------------------------------------------


Q)2
package com.labexam.entity;

public class BinarySearchTree {
	
	class Node {
		int key;
		Node left, right;

		public Node(int item)
		{
			key = item;
			left = right = null;
		}
	}

	Node root;

	public BinarySearchTree(){
		root = null; 
	}

	BinarySearchTree(int value){
		root = new Node(value); 
	}

	
	public void insert(int key){ 
		root = insertRec(root, key); 
	}

	public Node search(Node root, int key){
    
    if (root==null || root.key==key)
        return root;
 
    
    if (root.key < key)
       return search(root.right, key);
 
    return search(root.left, key);
}

	
	Node insertRec(Node root, int key){

		if (root == null) {
			root = new Node(key);
			return root;
		}

		else if (key < root.key)
			root.left = insertRec(root.left, key);
		else if (key > root.key)
			root.right = insertRec(root.right, key);

		return root;
	}

	
	public void postorder(){
		postorderRec(root); 
	}

	public void postorderRec(Node root)
	{
		if (root != null) {
			postorderRec(root.left);
			postorderRec(root.right);
			System.out.println(root.key);
			
		}
	}

}
package com.labexam.main;

import com.labexam.entity.BinarySearchTree;

public class BinarySearchTreeMain {

	public static void main(String[] args) {
		

		BinarySearchTree tree = new BinarySearchTree();

		
		tree.insert(20);
		tree.insert(15);
		tree.insert(75);
		tree.insert(44);
		tree.insert(19);
		tree.insert(88);
		tree.insert(83);
		tree.insert(3);
		
		tree.postorder();

	}

}

output=======
3
19
15
44
83
88
75
20